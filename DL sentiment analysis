{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8937905,"sourceType":"datasetVersion","datasetId":5377631}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Sentiment Analysis using deep learning models RNN\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport tensorflow as tf\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding,SimpleRNN, LSTM, GRU, Dense, SpatialDropout1D, Bidirectional\nfrom tensorflow.keras.callbacks import EarlyStopping\n\n# For reproducibility\nnp.random.seed(42)\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-13T06:22:11.154375Z","iopub.execute_input":"2024-07-13T06:22:11.154719Z","iopub.status.idle":"2024-07-13T06:22:23.654458Z","shell.execute_reply.started":"2024-07-13T06:22:11.154690Z","shell.execute_reply":"2024-07-13T06:22:23.653625Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-07-13 06:22:12.912335: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-13 06:22:12.912471: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-13 06:22:13.044567: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Using multiple GPUs (optional)\nThe best practice for using multiple GPUs is to use tf.distribute.Strategy\n[https://www.tensorflow.org/guide/gpu#using_multiple_gpus](http://)","metadata":{}},{"cell_type":"code","source":"gpus = tf.config.list_physical_devices('GPU')\nif gpus:\n  # Create 2 virtual GPUs with 1GB memory each\n  try:\n    tf.config.set_logical_device_configuration(\n        gpus[0],\n        [tf.config.LogicalDeviceConfiguration(memory_limit=1024),\n         tf.config.LogicalDeviceConfiguration(memory_limit=1024)])\n    logical_gpus = tf.config.list_logical_devices('GPU')\n    print(len(gpus), \"Physical GPU,\", len(logical_gpus), \"Logical GPUs\")\n  except RuntimeError as e:\n    # Virtual devices must be set before GPUs have been initialized\n    print(e)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:23.656305Z","iopub.execute_input":"2024-07-13T06:22:23.657014Z","iopub.status.idle":"2024-07-13T06:22:24.109631Z","shell.execute_reply.started":"2024-07-13T06:22:23.656980Z","shell.execute_reply":"2024-07-13T06:22:24.108522Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"2 Physical GPU, 3 Logical GPUs\n","output_type":"stream"}]},{"cell_type":"code","source":"tf.debugging.set_log_device_placement(True)\ngpus = tf.config.list_logical_devices('GPU')\nstrategy = tf.distribute.MirroredStrategy(gpus)\nwith strategy.scope():\n  inputs = tf.keras.layers.Input(shape=(1,))\n  predictions = tf.keras.layers.Dense(1)(inputs)\n  model = tf.keras.models.Model(inputs=inputs, outputs=predictions)\n  model.compile(loss='mse',\n                optimizer=tf.keras.optimizers.SGD(learning_rate=0.2))","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:24.111330Z","iopub.execute_input":"2024-07-13T06:22:24.111935Z","iopub.status.idle":"2024-07-13T06:22:24.655767Z","shell.execute_reply.started":"2024-07-13T06:22:24.111897Z","shell.execute_reply":"2024-07-13T06:22:24.654801Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"**Load Train Data**","metadata":{}},{"cell_type":"code","source":"# Load your dataset\ndf = pd.read_csv('/kaggle/input/train-data/aclImdb_data_50000.csv')  # Ensure your dataset has 'text' and 'label' columns\ndf.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:24.657839Z","iopub.execute_input":"2024-07-13T06:22:24.658129Z","iopub.status.idle":"2024-07-13T06:22:25.965902Z","shell.execute_reply.started":"2024-07-13T06:22:24.658098Z","shell.execute_reply":"2024-07-13T06:22:25.965003Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"                                                text label\n0  In a college dorm a guy is killed by somebody ...   neg\n1  The production year says it all. The movie is ...   neg\n2  A pleasant surprise! I expected a further down...   pos\n3  The \"math\" aspect to this is merely a gimmick ...   neg\n4  Some of the greatest and most loved horror mov...   neg","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>In a college dorm a guy is killed by somebody ...</td>\n      <td>neg</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>The production year says it all. The movie is ...</td>\n      <td>neg</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A pleasant surprise! I expected a further down...</td>\n      <td>pos</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>The \"math\" aspect to this is merely a gimmick ...</td>\n      <td>neg</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Some of the greatest and most loved horror mov...</td>\n      <td>neg</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Encode labels\nlabel_encoder = LabelEncoder()\ndf['label'] = label_encoder.fit_transform(df['label'])  # Assuming 'Positive' and 'Negative' are converted to 1 and 0\ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:25.966999Z","iopub.execute_input":"2024-07-13T06:22:25.967310Z","iopub.status.idle":"2024-07-13T06:22:25.992488Z","shell.execute_reply.started":"2024-07-13T06:22:25.967283Z","shell.execute_reply":"2024-07-13T06:22:25.991483Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                                                    text  label\n0      In a college dorm a guy is killed by somebody ...      0\n1      The production year says it all. The movie is ...      0\n2      A pleasant surprise! I expected a further down...      1\n3      The \"math\" aspect to this is merely a gimmick ...      0\n4      Some of the greatest and most loved horror mov...      0\n...                                                  ...    ...\n49995  I found this gem in a rack the local video ren...      0\n49996  If we consider three films with a similar subj...      1\n49997  King of Masks (Bian Lian in China) is a shocki...      1\n49998  It's hard to know what was going through Per K...      0\n49999  When I was in school I made a film about a cou...      0\n\n[50000 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>In a college dorm a guy is killed by somebody ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>The production year says it all. The movie is ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A pleasant surprise! I expected a further down...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>The \"math\" aspect to this is merely a gimmick ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Some of the greatest and most loved horror mov...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>49995</th>\n      <td>I found this gem in a rack the local video ren...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>49996</th>\n      <td>If we consider three films with a similar subj...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49997</th>\n      <td>King of Masks (Bian Lian in China) is a shocki...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49998</th>\n      <td>It's hard to know what was going through Per K...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>49999</th>\n      <td>When I was in school I made a film about a cou...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>50000 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))\n\nprint(\"Label Mapping:\")\nprint(label_mapping)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:25.993846Z","iopub.execute_input":"2024-07-13T06:22:25.994817Z","iopub.status.idle":"2024-07-13T06:22:26.000693Z","shell.execute_reply.started":"2024-07-13T06:22:25.994790Z","shell.execute_reply":"2024-07-13T06:22:25.999824Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Label Mapping:\n{'neg': 0, 'pos': 1}\n","output_type":"stream"}]},{"cell_type":"code","source":"# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)\nprint(X_train.shape,y_train.shape)\nprint(X_test.shape,y_test.shape)      ","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:26.001862Z","iopub.execute_input":"2024-07-13T06:22:26.002630Z","iopub.status.idle":"2024-07-13T06:22:26.017113Z","shell.execute_reply.started":"2024-07-13T06:22:26.002600Z","shell.execute_reply":"2024-07-13T06:22:26.016211Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"(40000,) (40000,)\n(10000,) (10000,)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Tokenize text\ntokenizer = Tokenizer(num_words=5000, lower=True, oov_token='<OOV>')\ntokenizer.fit_on_texts(X_train)\n\nX_train_seq = tokenizer.texts_to_sequences(X_train)\nX_test_seq = tokenizer.texts_to_sequences(X_test)\n\n# Pad sequences\nmax_seq_length = 100\nX_train_pad = pad_sequences(X_train_seq, maxlen=max_seq_length)\nX_test_pad = pad_sequences(X_test_seq, maxlen=max_seq_length)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:26.018329Z","iopub.execute_input":"2024-07-13T06:22:26.018603Z","iopub.status.idle":"2024-07-13T06:22:43.194462Z","shell.execute_reply.started":"2024-07-13T06:22:26.018580Z","shell.execute_reply":"2024-07-13T06:22:43.193674Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"**MODEL**","metadata":{}},{"cell_type":"code","source":"def create_rnn_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=5000, output_dim=128, input_length=max_seq_length))\n    model.add(SpatialDropout1D(0.2))\n    model.add(SimpleRNN(128, return_sequences=False))\n    model.add(Dense(1, activation='sigmoid'))\n    model.summary()\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:43.195592Z","iopub.execute_input":"2024-07-13T06:22:43.195869Z","iopub.status.idle":"2024-07-13T06:22:43.202381Z","shell.execute_reply.started":"2024-07-13T06:22:43.195846Z","shell.execute_reply":"2024-07-13T06:22:43.201324Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# Choose the model you want to train and evaluate\nmodel = create_rnn_model()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:43.205202Z","iopub.execute_input":"2024-07-13T06:22:43.205472Z","iopub.status.idle":"2024-07-13T06:22:43.242261Z","shell.execute_reply.started":"2024-07-13T06:22:43.205449Z","shell.execute_reply":"2024-07-13T06:22:43.241408Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n  warnings.warn(\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ spatial_dropout1d               │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n│ (\u001b[38;5;33mSpatialDropout1D\u001b[0m)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ simple_rnn (\u001b[38;5;33mSimpleRNN\u001b[0m)          │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ ?                      │   \u001b[38;5;34m0\u001b[0m (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ spatial_dropout1d               │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SpatialDropout1D</span>)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ simple_rnn (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SimpleRNN</span>)          │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ ?                      │   <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (unbuilt) │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}}]},{"cell_type":"markdown","source":"**Training**","metadata":{}},{"cell_type":"code","source":"\n# Define EarlyStopping callback\nearly_stopping_callback = EarlyStopping(monitor='val_loss', \n                                        patience = 5, \n                                        restore_best_weights=True)\n\nimport time \nstart_time = time.time() # Start time\n\n# Train the model\nhistory = model.fit(X_train_pad, y_train, epochs=50, batch_size=64, validation_data=(X_test_pad, y_test),\n          verbose=1)\nend_time = time.time()# End time\n# Calculate elapsed time\nelapsed_time = (end_time - start_time) / 60\nprint(f\"Training time: {elapsed_time:.2f} minutes\")\n# Evaluate the model\nloss, accuracy = model.evaluate(X_test_pad, y_test, verbose=0)\nprint(f'Accuracy: {accuracy * 100:.2f}%')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:22:43.243216Z","iopub.execute_input":"2024-07-13T06:22:43.243459Z","iopub.status.idle":"2024-07-13T06:27:54.657852Z","shell.execute_reply.started":"2024-07-13T06:22:43.243438Z","shell.execute_reply":"2024-07-13T06:27:54.656894Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m 13/625\u001b[0m \u001b[37m━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[1m9s\u001b[0m 15ms/step - accuracy: 0.5046 - loss: 0.7030","output_type":"stream"},{"name":"stderr","text":"WARNING: All log messages before absl::InitializeLog() is called are written to STDERR\nI0000 00:00:1720851767.512851     109 device_compiler.h:186] Compiled cluster using XLA!  This line is logged at most once for the lifetime of the process.\n","output_type":"stream"},{"name":"stdout","text":"\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m11s\u001b[0m 11ms/step - accuracy: 0.6085 - loss: 0.6375 - val_accuracy: 0.7998 - val_loss: 0.4457\nEpoch 2/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8116 - loss: 0.4247 - val_accuracy: 0.7761 - val_loss: 0.4736\nEpoch 3/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8335 - loss: 0.3796 - val_accuracy: 0.7484 - val_loss: 0.5213\nEpoch 4/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8261 - loss: 0.4045 - val_accuracy: 0.8332 - val_loss: 0.3937\nEpoch 5/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8700 - loss: 0.3205 - val_accuracy: 0.8333 - val_loss: 0.3873\nEpoch 6/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8582 - loss: 0.3358 - val_accuracy: 0.8319 - val_loss: 0.4057\nEpoch 7/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8809 - loss: 0.2954 - val_accuracy: 0.8335 - val_loss: 0.3906\nEpoch 8/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8750 - loss: 0.3034 - val_accuracy: 0.8131 - val_loss: 0.4349\nEpoch 9/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.7866 - loss: 0.4346 - val_accuracy: 0.8044 - val_loss: 0.4419\nEpoch 10/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8747 - loss: 0.3123 - val_accuracy: 0.8090 - val_loss: 0.4515\nEpoch 11/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8227 - loss: 0.4038 - val_accuracy: 0.7889 - val_loss: 0.4823\nEpoch 12/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8586 - loss: 0.3451 - val_accuracy: 0.8118 - val_loss: 0.4622\nEpoch 13/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8691 - loss: 0.3237 - val_accuracy: 0.8213 - val_loss: 0.4435\nEpoch 14/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8822 - loss: 0.2938 - val_accuracy: 0.8288 - val_loss: 0.4328\nEpoch 15/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8924 - loss: 0.2769 - val_accuracy: 0.8084 - val_loss: 0.4418\nEpoch 16/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8980 - loss: 0.2627 - val_accuracy: 0.8299 - val_loss: 0.4454\nEpoch 17/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8967 - loss: 0.2648 - val_accuracy: 0.7903 - val_loss: 0.4689\nEpoch 18/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8574 - loss: 0.3342 - val_accuracy: 0.7252 - val_loss: 0.5687\nEpoch 19/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8562 - loss: 0.3420 - val_accuracy: 0.8188 - val_loss: 0.4474\nEpoch 20/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8580 - loss: 0.3251 - val_accuracy: 0.6652 - val_loss: 0.6102\nEpoch 21/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8504 - loss: 0.3446 - val_accuracy: 0.8023 - val_loss: 0.4413\nEpoch 22/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8859 - loss: 0.2801 - val_accuracy: 0.8047 - val_loss: 0.4701\nEpoch 23/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.7856 - loss: 0.4387 - val_accuracy: 0.7916 - val_loss: 0.4757\nEpoch 24/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8950 - loss: 0.2669 - val_accuracy: 0.8245 - val_loss: 0.4506\nEpoch 25/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.9079 - loss: 0.2399 - val_accuracy: 0.8137 - val_loss: 0.4553\nEpoch 26/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8850 - loss: 0.2817 - val_accuracy: 0.6536 - val_loss: 1.0228\nEpoch 27/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.7371 - loss: 0.5579 - val_accuracy: 0.7694 - val_loss: 0.5761\nEpoch 28/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.7799 - loss: 0.4629 - val_accuracy: 0.6595 - val_loss: 0.6174\nEpoch 29/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.7148 - loss: 0.5486 - val_accuracy: 0.6728 - val_loss: 0.6042\nEpoch 30/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.7387 - loss: 0.5171 - val_accuracy: 0.6965 - val_loss: 0.5924\nEpoch 31/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.7720 - loss: 0.4767 - val_accuracy: 0.7163 - val_loss: 0.5773\nEpoch 32/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8036 - loss: 0.4341 - val_accuracy: 0.7496 - val_loss: 0.5479\nEpoch 33/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8437 - loss: 0.3651 - val_accuracy: 0.6323 - val_loss: 0.6322\nEpoch 34/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.7290 - loss: 0.5246 - val_accuracy: 0.6987 - val_loss: 0.5982\nEpoch 35/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8136 - loss: 0.4108 - val_accuracy: 0.7734 - val_loss: 0.5414\nEpoch 36/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8682 - loss: 0.3219 - val_accuracy: 0.7911 - val_loss: 0.5169\nEpoch 37/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8929 - loss: 0.2742 - val_accuracy: 0.8028 - val_loss: 0.5133\nEpoch 38/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8626 - loss: 0.3224 - val_accuracy: 0.6885 - val_loss: 0.6055\nEpoch 39/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.7994 - loss: 0.4444 - val_accuracy: 0.7806 - val_loss: 0.5040\nEpoch 40/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8091 - loss: 0.4232 - val_accuracy: 0.7771 - val_loss: 0.5252\nEpoch 41/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8336 - loss: 0.3898 - val_accuracy: 0.7919 - val_loss: 0.5101\nEpoch 42/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m10s\u001b[0m 10ms/step - accuracy: 0.8724 - loss: 0.3190 - val_accuracy: 0.7759 - val_loss: 0.5148\nEpoch 43/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8634 - loss: 0.3327 - val_accuracy: 0.7951 - val_loss: 0.5055\nEpoch 44/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8891 - loss: 0.2821 - val_accuracy: 0.8179 - val_loss: 0.4727\nEpoch 45/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.9004 - loss: 0.2589 - val_accuracy: 0.8172 - val_loss: 0.4689\nEpoch 46/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.9068 - loss: 0.2428 - val_accuracy: 0.8018 - val_loss: 0.4998\nEpoch 47/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.9085 - loss: 0.2359 - val_accuracy: 0.6859 - val_loss: 0.6350\nEpoch 48/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.8645 - loss: 0.3158 - val_accuracy: 0.8190 - val_loss: 0.4987\nEpoch 49/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.9121 - loss: 0.2272 - val_accuracy: 0.7917 - val_loss: 0.5164\nEpoch 50/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m6s\u001b[0m 10ms/step - accuracy: 0.9209 - loss: 0.2108 - val_accuracy: 0.8066 - val_loss: 0.5049\nTraining time: 5.17 minutes\nAccuracy: 80.66%\n","output_type":"stream"}]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:27:54.658976Z","iopub.execute_input":"2024-07-13T06:27:54.659274Z","iopub.status.idle":"2024-07-13T06:27:54.678754Z","shell.execute_reply.started":"2024-07-13T06:27:54.659248Z","shell.execute_reply":"2024-07-13T06:27:54.677916Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │       \u001b[38;5;34m640,000\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ spatial_dropout1d               │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mSpatialDropout1D\u001b[0m)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ simple_rnn (\u001b[38;5;33mSimpleRNN\u001b[0m)          │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m128\u001b[0m)              │        \u001b[38;5;34m32,896\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m1\u001b[0m)                │           \u001b[38;5;34m129\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │       <span style=\"color: #00af00; text-decoration-color: #00af00\">640,000</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ spatial_dropout1d               │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SpatialDropout1D</span>)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ simple_rnn (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SimpleRNN</span>)          │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">32,896</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                │           <span style=\"color: #00af00; text-decoration-color: #00af00\">129</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,019,077\u001b[0m (7.70 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,019,077</span> (7.70 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m673,025\u001b[0m (2.57 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">673,025</span> (2.57 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m1,346,052\u001b[0m (5.13 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,346,052</span> (5.13 MB)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, roc_curve\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:27:54.680874Z","iopub.execute_input":"2024-07-13T06:27:54.681449Z","iopub.status.idle":"2024-07-13T06:27:54.841937Z","shell.execute_reply.started":"2024-07-13T06:27:54.681425Z","shell.execute_reply":"2024-07-13T06:27:54.841064Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"***loss function curve***","metadata":{}},{"cell_type":"code","source":"# Plotting the loss function curve\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.title('Loss Function Curve')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:27:54.843140Z","iopub.execute_input":"2024-07-13T06:27:54.843804Z","iopub.status.idle":"2024-07-13T06:27:55.174249Z","shell.execute_reply.started":"2024-07-13T06:27:54.843772Z","shell.execute_reply":"2024-07-13T06:27:55.173360Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"y_pred = (model.predict(X_test_pad) > 0.5).astype(\"int32\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:27:55.175643Z","iopub.execute_input":"2024-07-13T06:27:55.175999Z","iopub.status.idle":"2024-07-13T06:27:56.664402Z","shell.execute_reply.started":"2024-07-13T06:27:55.175970Z","shell.execute_reply":"2024-07-13T06:27:56.663520Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"conf_matrix = confusion_matrix(y_test, y_pred)\nprint(conf_matrix)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:27:56.665605Z","iopub.execute_input":"2024-07-13T06:27:56.665907Z","iopub.status.idle":"2024-07-13T06:27:56.674027Z","shell.execute_reply.started":"2024-07-13T06:27:56.665884Z","shell.execute_reply":"2024-07-13T06:27:56.673097Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"[[3975 1020]\n [ 914 4091]]\n","output_type":"stream"}]},{"cell_type":"code","source":"report = classification_report(y_test, y_pred, target_names=label_encoder.classes_)\nprint(report)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:27:56.675418Z","iopub.execute_input":"2024-07-13T06:27:56.675698Z","iopub.status.idle":"2024-07-13T06:27:56.698414Z","shell.execute_reply.started":"2024-07-13T06:27:56.675675Z","shell.execute_reply":"2024-07-13T06:27:56.697593Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n         neg       0.81      0.80      0.80      4995\n         pos       0.80      0.82      0.81      5005\n\n    accuracy                           0.81     10000\n   macro avg       0.81      0.81      0.81     10000\nweighted avg       0.81      0.81      0.81     10000\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"> In conclusion, the model shows balanced performance across both classes with similar precision, recall, and F1-scores, resulting in an overall accuracy of 80%.\n\n\n\n\n\n\n","metadata":{}},{"cell_type":"markdown","source":"##  **Save model file**","metadata":{}},{"cell_type":"code","source":"# Save the entire model to a file\nmodel.save('./sentiment_analysis_RNN_model.h5')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:27:56.699488Z","iopub.execute_input":"2024-07-13T06:27:56.699983Z","iopub.status.idle":"2024-07-13T06:27:56.747898Z","shell.execute_reply.started":"2024-07-13T06:27:56.699951Z","shell.execute_reply":"2024-07-13T06:27:56.747104Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"import pickle\n\n# Save the tokenizer\nwith open('./tokenizer.pickle', 'wb') as handle:\n    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T06:27:56.748992Z","iopub.execute_input":"2024-07-13T06:27:56.749287Z","iopub.status.idle":"2024-07-13T06:27:56.862584Z","shell.execute_reply.started":"2024-07-13T06:27:56.749263Z","shell.execute_reply":"2024-07-13T06:27:56.861629Z"},"trusted":true},"execution_count":19,"outputs":[]}]}