{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"nvidiaTeslaT4","dataSources":[{"sourceId":8937905,"sourceType":"datasetVersion","datasetId":5377631}],"dockerImageVersionId":30747,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":true}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Sentiment Analysis using deep learning models RNN\n","metadata":{}},{"cell_type":"code","source":"import numpy as np\nimport tensorflow as tf\nimport pandas as pd\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.preprocessing import LabelEncoder\nfrom tensorflow.keras.preprocessing.text import Tokenizer\nfrom tensorflow.keras.preprocessing.sequence import pad_sequences\nfrom tensorflow.keras.models import Sequential\nfrom tensorflow.keras.layers import Embedding,SimpleRNN, LSTM, GRU, Dense, SpatialDropout1D, Bidirectional,Dropout\nfrom tensorflow.keras.callbacks import EarlyStopping,ReduceLROnPlateau\n\n# For reproducibility\nnp.random.seed(42)\n","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-07-13T15:08:04.642992Z","iopub.execute_input":"2024-07-13T15:08:04.643693Z","iopub.status.idle":"2024-07-13T15:08:08.672496Z","shell.execute_reply.started":"2024-07-13T15:08:04.643661Z","shell.execute_reply":"2024-07-13T15:08:08.671573Z"},"trusted":true},"execution_count":1,"outputs":[{"name":"stderr","text":"2024-07-13 15:08:05.017461: E external/local_xla/xla/stream_executor/cuda/cuda_dnn.cc:9261] Unable to register cuDNN factory: Attempting to register factory for plugin cuDNN when one has already been registered\n2024-07-13 15:08:05.017517: E external/local_xla/xla/stream_executor/cuda/cuda_fft.cc:607] Unable to register cuFFT factory: Attempting to register factory for plugin cuFFT when one has already been registered\n2024-07-13 15:08:05.019148: E external/local_xla/xla/stream_executor/cuda/cuda_blas.cc:1515] Unable to register cuBLAS factory: Attempting to register factory for plugin cuBLAS when one has already been registered\n","output_type":"stream"}]},{"cell_type":"markdown","source":"# Using multiple GPUs (optional)\nThe best practice for using multiple GPUs is to use tf.distribute.Strategy\n[https://www.tensorflow.org/guide/gpu#using_multiple_gpus](http://)","metadata":{}},{"cell_type":"code","source":"gpus = tf.config.list_physical_devices('GPU')\nif gpus:\n  # Create 2 virtual GPUs with 1GB memory each\n  try:\n    tf.config.set_logical_device_configuration(\n        gpus[0],\n        [tf.config.LogicalDeviceConfiguration(memory_limit=1024),\n         tf.config.LogicalDeviceConfiguration(memory_limit=1024)])\n    logical_gpus = tf.config.list_logical_devices('GPU')\n    print(len(gpus), \"Physical GPU,\", len(logical_gpus), \"Logical GPUs\")\n  except RuntimeError as e:\n    # Virtual devices must be set before GPUs have been initialized\n    print(e)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:08.674281Z","iopub.execute_input":"2024-07-13T15:08:08.674829Z","iopub.status.idle":"2024-07-13T15:08:08.954921Z","shell.execute_reply.started":"2024-07-13T15:08:08.674800Z","shell.execute_reply":"2024-07-13T15:08:08.953444Z"},"trusted":true},"execution_count":2,"outputs":[{"name":"stdout","text":"2 Physical GPU, 3 Logical GPUs\n","output_type":"stream"}]},{"cell_type":"code","source":"tf.debugging.set_log_device_placement(True)\ngpus = tf.config.list_logical_devices('GPU')\nstrategy = tf.distribute.MirroredStrategy(gpus)\nwith strategy.scope():\n  inputs = tf.keras.layers.Input(shape=(1,))\n  predictions = tf.keras.layers.Dense(1)(inputs)\n  model = tf.keras.models.Model(inputs=inputs, outputs=predictions)\n  model.compile(loss='mse',\n                optimizer=tf.keras.optimizers.SGD(learning_rate=0.2))","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:08.956742Z","iopub.execute_input":"2024-07-13T15:08:08.957068Z","iopub.status.idle":"2024-07-13T15:08:09.375664Z","shell.execute_reply.started":"2024-07-13T15:08:08.957032Z","shell.execute_reply":"2024-07-13T15:08:09.374655Z"},"trusted":true},"execution_count":3,"outputs":[]},{"cell_type":"markdown","source":"**Load Train Data**","metadata":{}},{"cell_type":"code","source":"# Load your dataset\ndf = pd.read_csv('/kaggle/input/train-data/aclImdb_data_50000.csv')  # Ensure your dataset has 'text' and 'label' columns\ndf.head(5)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:09.376834Z","iopub.execute_input":"2024-07-13T15:08:09.377159Z","iopub.status.idle":"2024-07-13T15:08:10.066202Z","shell.execute_reply.started":"2024-07-13T15:08:09.377132Z","shell.execute_reply":"2024-07-13T15:08:10.065284Z"},"trusted":true},"execution_count":4,"outputs":[{"execution_count":4,"output_type":"execute_result","data":{"text/plain":"                                                text label\n0  In a college dorm a guy is killed by somebody ...   neg\n1  The production year says it all. The movie is ...   neg\n2  A pleasant surprise! I expected a further down...   pos\n3  The \"math\" aspect to this is merely a gimmick ...   neg\n4  Some of the greatest and most loved horror mov...   neg","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>In a college dorm a guy is killed by somebody ...</td>\n      <td>neg</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>The production year says it all. The movie is ...</td>\n      <td>neg</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A pleasant surprise! I expected a further down...</td>\n      <td>pos</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>The \"math\" aspect to this is merely a gimmick ...</td>\n      <td>neg</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Some of the greatest and most loved horror mov...</td>\n      <td>neg</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"# Encode labels\nlabel_encoder = LabelEncoder()\ndf['label'] = label_encoder.fit_transform(df['label'])  # Assuming 'Positive' and 'Negative' are converted to 1 and 0\ndf","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:10.068940Z","iopub.execute_input":"2024-07-13T15:08:10.069292Z","iopub.status.idle":"2024-07-13T15:08:10.092783Z","shell.execute_reply.started":"2024-07-13T15:08:10.069263Z","shell.execute_reply":"2024-07-13T15:08:10.091795Z"},"trusted":true},"execution_count":5,"outputs":[{"execution_count":5,"output_type":"execute_result","data":{"text/plain":"                                                    text  label\n0      In a college dorm a guy is killed by somebody ...      0\n1      The production year says it all. The movie is ...      0\n2      A pleasant surprise! I expected a further down...      1\n3      The \"math\" aspect to this is merely a gimmick ...      0\n4      Some of the greatest and most loved horror mov...      0\n...                                                  ...    ...\n49995  I found this gem in a rack the local video ren...      0\n49996  If we consider three films with a similar subj...      1\n49997  King of Masks (Bian Lian in China) is a shocki...      1\n49998  It's hard to know what was going through Per K...      0\n49999  When I was in school I made a film about a cou...      0\n\n[50000 rows x 2 columns]","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>text</th>\n      <th>label</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>In a college dorm a guy is killed by somebody ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>The production year says it all. The movie is ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>A pleasant surprise! I expected a further down...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>The \"math\" aspect to this is merely a gimmick ...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>Some of the greatest and most loved horror mov...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>...</th>\n      <td>...</td>\n      <td>...</td>\n    </tr>\n    <tr>\n      <th>49995</th>\n      <td>I found this gem in a rack the local video ren...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>49996</th>\n      <td>If we consider three films with a similar subj...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49997</th>\n      <td>King of Masks (Bian Lian in China) is a shocki...</td>\n      <td>1</td>\n    </tr>\n    <tr>\n      <th>49998</th>\n      <td>It's hard to know what was going through Per K...</td>\n      <td>0</td>\n    </tr>\n    <tr>\n      <th>49999</th>\n      <td>When I was in school I made a film about a cou...</td>\n      <td>0</td>\n    </tr>\n  </tbody>\n</table>\n<p>50000 rows × 2 columns</p>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"label_mapping = dict(zip(label_encoder.classes_, label_encoder.transform(label_encoder.classes_)))\n\nprint(\"Label Mapping:\")\nprint(label_mapping)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:10.094057Z","iopub.execute_input":"2024-07-13T15:08:10.094739Z","iopub.status.idle":"2024-07-13T15:08:10.105090Z","shell.execute_reply.started":"2024-07-13T15:08:10.094704Z","shell.execute_reply":"2024-07-13T15:08:10.103939Z"},"trusted":true},"execution_count":6,"outputs":[{"name":"stdout","text":"Label Mapping:\n{'neg': 0, 'pos': 1}\n","output_type":"stream"}]},{"cell_type":"code","source":"# Split data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(df['text'], df['label'], test_size=0.2, random_state=42)\nprint(X_train.shape,y_train.shape)\nprint(X_test.shape,y_test.shape)      ","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:10.106224Z","iopub.execute_input":"2024-07-13T15:08:10.106470Z","iopub.status.idle":"2024-07-13T15:08:10.118570Z","shell.execute_reply.started":"2024-07-13T15:08:10.106449Z","shell.execute_reply":"2024-07-13T15:08:10.117660Z"},"trusted":true},"execution_count":7,"outputs":[{"name":"stdout","text":"(40000,) (40000,)\n(10000,) (10000,)\n","output_type":"stream"}]},{"cell_type":"code","source":"# Tokenize text\ntokenizer = Tokenizer(num_words=5000, lower=True, oov_token='<OOV>')\ntokenizer.fit_on_texts(X_train)\n\nX_train_seq = tokenizer.texts_to_sequences(X_train)\nX_test_seq = tokenizer.texts_to_sequences(X_test)\n\n# Pad sequences\nmax_seq_length = 100\nX_train_pad = pad_sequences(X_train_seq, maxlen=max_seq_length)\nX_test_pad = pad_sequences(X_test_seq, maxlen=max_seq_length)","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:10.119631Z","iopub.execute_input":"2024-07-13T15:08:10.119890Z","iopub.status.idle":"2024-07-13T15:08:27.495989Z","shell.execute_reply.started":"2024-07-13T15:08:10.119868Z","shell.execute_reply":"2024-07-13T15:08:27.495169Z"},"trusted":true},"execution_count":8,"outputs":[]},{"cell_type":"markdown","source":"**MODEL**","metadata":{}},{"cell_type":"code","source":"\ndef create_gru_model():\n    model = Sequential()\n    model.add(Embedding(input_dim=5000, output_dim=128, input_length=max_seq_length))\n    model.add(SpatialDropout1D(0.2))\n    model.add(GRU(128, return_sequences=False))\n    model.add(Dropout(0.5))  # Add Dropout layer\n    model.add(Dense(1, activation='sigmoid'))\n    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=['accuracy'])\n    return model","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:27.497263Z","iopub.execute_input":"2024-07-13T15:08:27.497647Z","iopub.status.idle":"2024-07-13T15:08:27.504768Z","shell.execute_reply.started":"2024-07-13T15:08:27.497611Z","shell.execute_reply":"2024-07-13T15:08:27.503907Z"},"trusted":true},"execution_count":9,"outputs":[]},{"cell_type":"code","source":"# Choose the model you want to train and evaluate\nmodel = create_gru_model()\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:27.505743Z","iopub.execute_input":"2024-07-13T15:08:27.506071Z","iopub.status.idle":"2024-07-13T15:08:27.536757Z","shell.execute_reply.started":"2024-07-13T15:08:27.506037Z","shell.execute_reply":"2024-07-13T15:08:27.535828Z"},"trusted":true},"execution_count":10,"outputs":[{"name":"stderr","text":"/opt/conda/lib/python3.10/site-packages/keras/src/layers/core/embedding.py:90: UserWarning: Argument `input_length` is deprecated. Just remove it.\n  warnings.warn(\n","output_type":"stream"}]},{"cell_type":"markdown","source":"**Training**","metadata":{}},{"cell_type":"code","source":"\n# Define EarlyStopping callback\nearly_stopping_callback = EarlyStopping(monitor='val_loss', \n                                        patience = 3, \n                                        restore_best_weights=True)\n# Define ReduceLROnPlateau callback\nreduce_lr_callback = ReduceLROnPlateau(monitor='val_loss', \n                                       factor=0.1, \n                                       patience=2, \n                                       min_lr=1e-6, \n                                       verbose=1)\n\nimport time \nstart_time = time.time() # Start time\n\n# Train the model\nhistory = model.fit(X_train_pad, y_train, epochs=50, batch_size=64, validation_data=(X_test_pad, y_test),\n          verbose=1,callbacks=[early_stopping_callback,reduce_lr_callback])#callbacks=[early_stopping_callback]\nend_time = time.time()# End time\n# Calculate elapsed time\nelapsed_time = (end_time - start_time) / 60\nprint(f\"Training time: {elapsed_time:.2f} minutes\")\n# Evaluate the model\nloss, accuracy = model.evaluate(X_test_pad, y_test, verbose=0)\nprint(f'Accuracy: {accuracy * 100:.2f}%')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:27.537682Z","iopub.execute_input":"2024-07-13T15:08:27.537935Z","iopub.status.idle":"2024-07-13T15:08:55.148448Z","shell.execute_reply.started":"2024-07-13T15:08:27.537913Z","shell.execute_reply":"2024-07-13T15:08:55.147443Z"},"trusted":true},"execution_count":11,"outputs":[{"name":"stdout","text":"Epoch 1/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m9s\u001b[0m 8ms/step - accuracy: 0.7196 - loss: 0.5169 - val_accuracy: 0.8608 - val_loss: 0.3297 - learning_rate: 0.0010\nEpoch 2/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.8792 - loss: 0.2834 - val_accuracy: 0.8739 - val_loss: 0.2969 - learning_rate: 0.0010\nEpoch 3/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.9112 - loss: 0.2245 - val_accuracy: 0.8675 - val_loss: 0.3148 - learning_rate: 0.0010\nEpoch 4/50\n\u001b[1m620/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m━\u001b[0m \u001b[1m0s\u001b[0m 6ms/step - accuracy: 0.9326 - loss: 0.1799\nEpoch 4: ReduceLROnPlateau reducing learning rate to 0.00010000000474974513.\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.9325 - loss: 0.1800 - val_accuracy: 0.8660 - val_loss: 0.3278 - learning_rate: 0.0010\nEpoch 5/50\n\u001b[1m625/625\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m4s\u001b[0m 7ms/step - accuracy: 0.9548 - loss: 0.1327 - val_accuracy: 0.8663 - val_loss: 0.3811 - learning_rate: 1.0000e-04\nTraining time: 0.44 minutes\nAccuracy: 87.39%\n","output_type":"stream"}]},{"cell_type":"code","source":"model.summary()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:55.150079Z","iopub.execute_input":"2024-07-13T15:08:55.150456Z","iopub.status.idle":"2024-07-13T15:08:55.173800Z","shell.execute_reply.started":"2024-07-13T15:08:55.150421Z","shell.execute_reply":"2024-07-13T15:08:55.172921Z"},"trusted":true},"execution_count":12,"outputs":[{"output_type":"display_data","data":{"text/plain":"\u001b[1mModel: \"sequential\"\u001b[0m\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\">Model: \"sequential\"</span>\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃\u001b[1m \u001b[0m\u001b[1mLayer (type)                   \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1mOutput Shape          \u001b[0m\u001b[1m \u001b[0m┃\u001b[1m \u001b[0m\u001b[1m      Param #\u001b[0m\u001b[1m \u001b[0m┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (\u001b[38;5;33mEmbedding\u001b[0m)           │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │       \u001b[38;5;34m640,000\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ spatial_dropout1d               │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m100\u001b[0m, \u001b[38;5;34m128\u001b[0m)         │             \u001b[38;5;34m0\u001b[0m │\n│ (\u001b[38;5;33mSpatialDropout1D\u001b[0m)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ gru (\u001b[38;5;33mGRU\u001b[0m)                       │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m128\u001b[0m)              │        \u001b[38;5;34m99,072\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (\u001b[38;5;33mDropout\u001b[0m)               │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m128\u001b[0m)              │             \u001b[38;5;34m0\u001b[0m │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (\u001b[38;5;33mDense\u001b[0m)                 │ (\u001b[38;5;34m64\u001b[0m, \u001b[38;5;34m1\u001b[0m)                │           \u001b[38;5;34m129\u001b[0m │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\">┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━━━━━━━━━━┳━━━━━━━━━━━━━━━┓\n┃<span style=\"font-weight: bold\"> Layer (type)                    </span>┃<span style=\"font-weight: bold\"> Output Shape           </span>┃<span style=\"font-weight: bold\">       Param # </span>┃\n┡━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━━━━━━━━━━╇━━━━━━━━━━━━━━━┩\n│ embedding (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Embedding</span>)           │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │       <span style=\"color: #00af00; text-decoration-color: #00af00\">640,000</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ spatial_dropout1d               │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">100</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)         │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n│ (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">SpatialDropout1D</span>)              │                        │               │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ gru (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">GRU</span>)                       │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)              │        <span style=\"color: #00af00; text-decoration-color: #00af00\">99,072</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dropout (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dropout</span>)               │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">128</span>)              │             <span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> │\n├─────────────────────────────────┼────────────────────────┼───────────────┤\n│ dense_1 (<span style=\"color: #0087ff; text-decoration-color: #0087ff\">Dense</span>)                 │ (<span style=\"color: #00af00; text-decoration-color: #00af00\">64</span>, <span style=\"color: #00af00; text-decoration-color: #00af00\">1</span>)                │           <span style=\"color: #00af00; text-decoration-color: #00af00\">129</span> │\n└─────────────────────────────────┴────────────────────────┴───────────────┘\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Total params: \u001b[0m\u001b[38;5;34m2,217,605\u001b[0m (8.46 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Total params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">2,217,605</span> (8.46 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Trainable params: \u001b[0m\u001b[38;5;34m739,201\u001b[0m (2.82 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">739,201</span> (2.82 MB)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Non-trainable params: \u001b[0m\u001b[38;5;34m0\u001b[0m (0.00 B)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Non-trainable params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">0</span> (0.00 B)\n</pre>\n"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"\u001b[1m Optimizer params: \u001b[0m\u001b[38;5;34m1,478,404\u001b[0m (5.64 MB)\n","text/html":"<pre style=\"white-space:pre;overflow-x:auto;line-height:normal;font-family:Menlo,'DejaVu Sans Mono',consolas,'Courier New',monospace\"><span style=\"font-weight: bold\"> Optimizer params: </span><span style=\"color: #00af00; text-decoration-color: #00af00\">1,478,404</span> (5.64 MB)\n</pre>\n"},"metadata":{}}]},{"cell_type":"code","source":"from sklearn.metrics import confusion_matrix, classification_report, roc_auc_score, roc_curve\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:55.174911Z","iopub.execute_input":"2024-07-13T15:08:55.175191Z","iopub.status.idle":"2024-07-13T15:08:55.281596Z","shell.execute_reply.started":"2024-07-13T15:08:55.175167Z","shell.execute_reply":"2024-07-13T15:08:55.280612Z"},"trusted":true},"execution_count":13,"outputs":[]},{"cell_type":"markdown","source":"***loss function curve***","metadata":{}},{"cell_type":"code","source":"# Plotting the loss function curve\nplt.plot(history.history['loss'], label='Training Loss')\nplt.plot(history.history['val_loss'], label='Validation Loss')\nplt.title('Loss Function Curve')\nplt.xlabel('Epochs')\nplt.ylabel('Loss')\nplt.legend()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:55.284727Z","iopub.execute_input":"2024-07-13T15:08:55.285079Z","iopub.status.idle":"2024-07-13T15:08:55.548976Z","shell.execute_reply.started":"2024-07-13T15:08:55.285053Z","shell.execute_reply":"2024-07-13T15:08:55.547973Z"},"trusted":true},"execution_count":14,"outputs":[{"output_type":"display_data","data":{"text/plain":"<Figure size 640x480 with 1 Axes>","image/png":""},"metadata":{}}]},{"cell_type":"code","source":"y_pred = (model.predict(X_test_pad) > 0.5).astype(\"int32\")\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:55.550068Z","iopub.execute_input":"2024-07-13T15:08:55.550341Z","iopub.status.idle":"2024-07-13T15:08:56.734691Z","shell.execute_reply.started":"2024-07-13T15:08:55.550318Z","shell.execute_reply":"2024-07-13T15:08:56.733781Z"},"trusted":true},"execution_count":15,"outputs":[{"name":"stdout","text":"\u001b[1m313/313\u001b[0m \u001b[32m━━━━━━━━━━━━━━━━━━━━\u001b[0m\u001b[37m\u001b[0m \u001b[1m1s\u001b[0m 3ms/step\n","output_type":"stream"}]},{"cell_type":"code","source":"conf_matrix = confusion_matrix(y_test, y_pred)\nprint(conf_matrix)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:56.735920Z","iopub.execute_input":"2024-07-13T15:08:56.736424Z","iopub.status.idle":"2024-07-13T15:08:56.744886Z","shell.execute_reply.started":"2024-07-13T15:08:56.736382Z","shell.execute_reply":"2024-07-13T15:08:56.743809Z"},"trusted":true},"execution_count":16,"outputs":[{"name":"stdout","text":"[[4374  621]\n [ 640 4365]]\n","output_type":"stream"}]},{"cell_type":"code","source":"report = classification_report(y_test, y_pred, target_names=label_encoder.classes_)\nprint(report)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:56.747091Z","iopub.execute_input":"2024-07-13T15:08:56.747422Z","iopub.status.idle":"2024-07-13T15:08:56.770415Z","shell.execute_reply.started":"2024-07-13T15:08:56.747393Z","shell.execute_reply":"2024-07-13T15:08:56.769547Z"},"trusted":true},"execution_count":17,"outputs":[{"name":"stdout","text":"              precision    recall  f1-score   support\n\n         neg       0.87      0.88      0.87      4995\n         pos       0.88      0.87      0.87      5005\n\n    accuracy                           0.87     10000\n   macro avg       0.87      0.87      0.87     10000\nweighted avg       0.87      0.87      0.87     10000\n\n","output_type":"stream"}]},{"cell_type":"markdown","source":"> In conclusion, the model shows balanced performance across both classes with similar precision, recall, and F1-scores, resulting in an overall accuracy of 86%.\n\n\n\n\n\n\n","metadata":{}},{"cell_type":"markdown","source":"##  **Save model file**","metadata":{}},{"cell_type":"code","source":"# Save the entire model to a file\nmodel.save('./sentiment_analysis_GRU_model.h5')","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:56.771605Z","iopub.execute_input":"2024-07-13T15:08:56.771881Z","iopub.status.idle":"2024-07-13T15:08:56.818856Z","shell.execute_reply.started":"2024-07-13T15:08:56.771856Z","shell.execute_reply":"2024-07-13T15:08:56.818049Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"import pickle\n\n# Save the tokenizer\nwith open('./tokenizer.pkl', 'wb') as handle:\n    pickle.dump(tokenizer, handle, protocol=pickle.HIGHEST_PROTOCOL)\n","metadata":{"execution":{"iopub.status.busy":"2024-07-13T15:08:56.819933Z","iopub.execute_input":"2024-07-13T15:08:56.820260Z","iopub.status.idle":"2024-07-13T15:08:56.941818Z","shell.execute_reply.started":"2024-07-13T15:08:56.820229Z","shell.execute_reply":"2024-07-13T15:08:56.940738Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}
